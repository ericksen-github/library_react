{"version":3,"sources":["components/topBar.jsx","components/book.jsx","components/library.jsx","components/newBook.jsx","components/form.jsx","components/localstorage.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","id","className","Component","Book","a","b","this","props","book","onDelete","onReadUpdate","read","title","author","pages","onChange","selected","onClick","Library","books","map","key","NewBook","createForm","document","getElementById","style","display","Form","handleHideForm","value","border","makeNewBook","onNewBook","status","options","selectedIndex","handleErrorChecking","titleText","authorText","pagesText","checker","isNaN","type","localStorageFunctions","storageAvailable","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","App","handleReadUpdate","state","setState","handleStorage","handleDelete","bookTitle","filter","handleNewBook","newBook","push","localStorage","JSON","stringify","getItem","parse","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0ed2c66.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TopBar extends Component {\n  render() {\n    return (\n      <div>\n        <div id=\"overlay\"></div>\n        <div id=\"topBar\">\n          <div className=\"title\">My Library</div>\n          <div className=\"subtitle\">The Odin Project</div>\n        </div>\n        <div id=\"booksTitleLabel\">Books</div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\n\nclass Book extends Component {\n  render() {\n    const { book, onDelete, onReadUpdate } = this.props;\n    let a, b;\n\n    if (book.read === \"Read\") {\n      a = \"selected\";\n    } else {\n      b = \"selected\";\n    }\n\n    return (\n      <tr>\n        <td>{book.title}</td>\n        <td>{book.author}</td>\n        <td>{book.pages}</td>\n        <td className=\"status\">\n          <select onChange={() => onReadUpdate(this.props.book)}>\n            <option selected={a}>Read</option>\n            <option selected={b}>Not Read</option>\n          </select>\n        </td>\n        <td className=\"removeOuter\">\n          <div className=\"removeButton\" onClick={() => onDelete(book.title)}>\n            Remove\n          </div>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default Book;\n","import React, { Component } from \"react\";\nimport TopBar from \"./topBar\";\nimport Book from \"./book\";\n\nclass Library extends Component {\n  render() {\n    const { books, onDelete, onReadUpdate } = this.props;\n    return (\n      <div>\n        <div id=\"overlay\"></div>\n        <TopBar />\n        <div id=\"tableContainer\">\n          <table>\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Author</th>\n                <th>Pages</th>\n                <th>Status</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {books.map(book => (\n                <Book\n                  onDelete={onDelete}\n                  book={book}\n                  key={book.title}\n                  onReadUpdate={onReadUpdate}\n                ></Book>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Library;\n","import React, { Component } from \"react\";\n\nclass NewBook extends Component {\n  createForm = () => {\n    document.getElementById(\"inputForm\").style.display = \"block\";\n    document.getElementById(\"overlay\").style.display = \"block\";\n  };\n\n  render() {\n    return (\n      <div id=\"newBookButton\" onClick={() => this.createForm()}>\n        Add Book\n      </div>\n    );\n  }\n}\n\nexport default NewBook;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  handleHideForm = () => {\n    document.getElementById(\"inputForm\").style.display = \"none\";\n    document.getElementById(\"overlay\").style.display = \"none\";\n\n    document.getElementById(\"titleText\").value = \"\";\n    document.getElementById(\"authorText\").value = \"\";\n    document.getElementById(\"pagesText\").value = \"\";\n    document.getElementById(\"selectMenu\").value = \"Read\";\n\n    document.getElementById(\"titleText\").style.border = \"solid 1px black\";\n    document.getElementById(\"authorText\").style.border = \"solid 1px black\";\n    document.getElementById(\"pagesText\").style.border = \"solid 1px black\";\n  };\n\n  makeNewBook = () => {\n    const { onNewBook } = this.props;\n\n    const title = document.getElementById(\"titleText\").value;\n    const author = document.getElementById(\"authorText\").value;\n    const pages = document.getElementById(\"pagesText\").value;\n    const a = document.getElementById(\"selectMenu\");\n    const status = a.options[a.selectedIndex].value;\n\n    if (this.handleErrorChecking(title, author, pages) === false) {\n      return;\n    }\n\n    const newBook = {\n      title: title,\n      author: author,\n      pages: pages,\n      read: status\n    };\n\n    onNewBook(newBook);\n    this.handleHideForm();\n  };\n\n  handleErrorChecking(titleText, authorText, pagesText) {\n    let checker = true;\n    if (titleText === \"\" || titleText == null) {\n      document.getElementById(\"titleText\").style.border = \"solid 1px red\";\n      checker = false;\n    } else {\n      document.getElementById(\"titleText\").style.border = \"solid 1px black\";\n    }\n    if (authorText === \"\" || authorText == null) {\n      document.getElementById(\"authorText\").style.border = \"solid 1px red\";\n      checker = false;\n    } else {\n      document.getElementById(\"authorText\").style.border = \"solid 1px black\";\n    }\n    if (\n      pagesText === \"\" ||\n      pagesText == null ||\n      pagesText <= 0 ||\n      isNaN(pagesText)\n    ) {\n      document.getElementById(\"pagesText\").style.border = \"solid 1px red\";\n      checker = false;\n    } else {\n      document.getElementById(\"pagesText\").style.border = \"solid 1px black\";\n    }\n    return checker;\n  }\n\n  render() {\n    return (\n      <div id=\"inputForm\">\n        <div id=\"formTitle\">New Book</div>\n        <div id=\"inputsContainer\">\n          <div className=\"formSubtitle\">Title</div>\n          <input type=\"text\" id=\"titleText\" />\n          <div className=\"formSubtitle\">Author</div>\n          <input type=\"text\" id=\"authorText\" />\n          <div className=\"formSubtitle\">Pages</div>\n          <input type=\"text\" id=\"pagesText\" />\n          <div className=\"formSubtitle\">Read Status</div>\n          <select id=\"selectMenu\">\n            <option className=\"readText\" id=\"readText\">\n              Read\n            </option>\n            <option className=\"notReadText\" id=\"notReadText\">\n              Not Read\n            </option>\n          </select>\n          <div id=\"formButtons\">\n            <div\n              className=\"formButton\"\n              id=\"addBookButton\"\n              onClick={this.makeNewBook}\n            >\n              Add book to Library\n            </div>\n            <div\n              className=\"formButton\"\n              id=\"cancelButton\"\n              onClick={() => this.handleHideForm()}\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","const localStorageFunctions = (() => {\n  const storageAvailable = type => {\n    // checks to see if browswer offers support for local storage\n    var storage;\n    try {\n      storage = window[type];\n      var x = \"__storage_test__\";\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return (\n        e instanceof DOMException &&\n        // everything except Firefox\n        (e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === \"QuotaExceededError\" ||\n          // Firefox\n          e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage &&\n        storage.length !== 0\n      );\n    }\n  };\n\n  return {\n    storageAvailable\n  };\n})();\n\nexport { localStorageFunctions };\n","import React, { Component } from \"react\";\nimport Library from \"./components/library\";\nimport NewBook from \"./components/newBook\";\nimport Form from \"./components/form\";\nimport { localStorageFunctions } from \"./components/localstorage\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    if (\n      localStorageFunctions.storageAvailable(\"localStorage\") &&\n      localStorage.getItem(\"savedLibrary\")\n    ) {\n      this.state = { books: JSON.parse(localStorage.getItem(\"savedLibrary\")) };\n    } else {\n      this.state = {\n        books: [\n          { title: \"1984\", author: \"George Orwell\", pages: 300, read: \"Read\" },\n          {\n            title: \"The Hobbit\",\n            author: \"J.R.R. Tolkien\",\n            pages: 200,\n            read: \"Read\"\n          },\n          {\n            title: \"The Martian\",\n            author: \"Andy Weir\",\n            pages: 100,\n            read: \"Read\"\n          },\n          {\n            title: \"Neuromancer\",\n            author: \"William Gibson\",\n            pages: 500,\n            read: \"Not Read\"\n          }\n        ]\n      };\n    }\n  }\n\n  handleReadUpdate = book => {\n    const books = this.state.books;\n\n    for (const b of books) {\n      if (b.title === book.title) {\n        if (b.read === \"Read\") {\n          b.read = \"Not Read\";\n        } else {\n          b.read = \"Read\";\n        }\n      }\n    }\n\n    this.setState({ books: books });\n    this.handleStorage(books);\n  };\n\n  handleDelete = bookTitle => {\n    const books = this.state.books.filter(book => book.title !== bookTitle);\n    this.setState({ books: books });\n    this.handleStorage(books);\n  };\n\n  handleNewBook = newBook => {\n    let books = this.state.books;\n    books.push(newBook);\n    this.setState({ books: books });\n    this.handleStorage(books);\n  };\n\n  handleStorage = books => {\n    if (localStorageFunctions.storageAvailable(\"localStorage\")) {\n      localStorage.setItem(\"savedLibrary\", JSON.stringify(books));\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Library\n          books={this.state.books}\n          onDelete={this.handleDelete}\n          onReadUpdate={this.handleReadUpdate}\n        />\n        <NewBook />\n        <Form onNewBook={this.handleNewBook} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}